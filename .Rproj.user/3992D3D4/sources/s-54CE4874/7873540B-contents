### linear case 1 - (CV-MA)
#ensure empty environment
rm(list = ls()) 

library(pROC)
library(MASS)

set.seed(101)
#set up working directory
setwd("/mnt/h/UbuntuRv2/Gibbs-sampler-algorithm/MA-Tingjin5")

set.seed(101)

#simulation set up
#200 train samples and 200 test samples with 1000 predictors
n <- 500
p <- 1000
rho <- 0.5

#correlation matrix
#correlation between any two predictors is 0.5 except x4,x5
M1   <- rho + (1-rho)*diag(p/2)

#correlation between x4 and others is 1/sqrt(0.5) except x5
M1[,4]  <- 1/sqrt(2)
M1[4,]  <- 1/sqrt(2)
M1[4,4] <- 1

M2 <- diag(1,p/2)                             
for (i in 1:p/2)
{
  for (j in 1:i)
  {
    M2[j,i] <- rho^{i-j}
    M2[i,j] <- M2[j,i]
  }
}

#coefficients
#with 4 preselected equal = 1 and others are randomly generated from N(0,1)
s <- 10
beta <- 2*c(1,1,1,1,1, rnorm(s-5))

AUC <- vector()

j <- 0
while(j < 100){
  
  #data matrix
  x1 <- mvrnorm(n,rep(0,p/2),M1)
  x2 <- mvrnorm(n,rep(0,p/2),M2)
  AX <- cbind(x1,x2)
  
  w <- AX[,c(1:4,1:6+p/2)]%*%beta + 3*sin(rnorm(n)*pi) + 3*cos(rnorm(n)*pi)
  q <- exp(w)/(1+exp(w))
  y <- rbinom(n,1,q)
  
  p <- PP <- ncol(AX)
  
  ######################################
  
  COV <- rep(0,len=PP)
  
  for(i in 1:PP){
    fit <- glm(y~AX[,i],family=binomial())
    COV[i] <- (summary(fit)$coefficients)[2,4]
  }
  
  a <- cbind(1:PP,COV)
  COV <- a[order(a[,2],decreasing=F),1:2]
  #print(COV)
  
  NN <- NumbPred <- 10 #The number of predictors
  
  #KK <- trunc(sum(COV[,2]<=0.01)/NN)
  KK <- 10
  print(c(NN,KK))
  
  ######################################
  
  Pred <- matrix(0,n,KK); PRED <- matrix(0,n,KK)
  
  COM <- 1
  USE <- COV[(NN*(COM-1)+1):(NN*COM),1]; E <- as.matrix(AX[,USE])
  
  for(i in 1:n){
    fit <- glm(y[-i]~E[-i,]+0,binomial(link="logit"))
    Pred[i,COM] <- sum( E[i,]*(fit$coefficients) )
  }
  
  fit <- glm(y~E+0,binomial(link="logit"))
  PRED[,COM] <- E%*%(fit$coefficients)
  
  for(m in 2:KK){
    
    COM <- m
    USE <- COV[(NN*(COM-1)+1):(NN*COM),1]; E <- as.matrix(AX[,USE])
    
    for(i in 1:n){
      fit <- glm(y[-i]~E[-i,]+0,binomial(link="logit"))
      Pred[i,COM] <- sum( E[i,]*(fit$coefficients) )
    }
    
    fit <- glm(y~E+0,binomial(link="logit"))
    PRED[,COM] <- E%*%(fit$coefficients)
    
  }
  
  ######################################
  
  w <- rep(0.5,len=KK)
  
  print(head(Pred))
  
  print(auc(y, Pred[,1]))
  print(auc(y, Pred[,2]))
  
  Stein <- function(w){
    Pi <- exp(Pred%*%w)/(1+exp(Pred%*%w))
    ss <- -sum( y*log(Pi)+(1-y)*log(1-Pi) )
    ss
  }
  
  model <- optim(w,fn=Stein,method="L-BFGS-B",lower=rep(0,len=m),upper=rep(1,len=m))
  
  w <- model$par
  
  ######################################
  
  Pred <- PRED%*%w
  EProb <- exp(Pred)/(1+exp(Pred))
  
  AUC <- c(AUC, auc(y, EProb))
  
  j <- j+1
  print(j)
}

save.image("simu_case2_log_AoS.RData")